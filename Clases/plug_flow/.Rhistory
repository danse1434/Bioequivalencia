})
}
y <- c(r = 1, C = 0)
parms <- c(Dn = Dn, Do = Do,An = An)
coord <- seq(0,cf, 0.01)
out <- ode(y, coord, mod1, parms)
results = data.frame(coord = as.numeric(out[,"time"]),
r = as.numeric(out[,"r"]),
C = as.numeric(out[,"C"]))
results$F = as.numeric(1-((results[,"r"])^3)-(results[,"C"]/Do))
cols = c("F" = "green4","C" = "blue4","r" = "red4")
return(tail(results$F,n=1))
}
f(An = 5, Dn = 1.0)
An = seq(0.5,6,length=100)
Dn = seq(0.1,10,length=100)
z = outer(An,Dn,f)
f = function(Dn,An)
{
Dn = Dn
An = An
Do = 2
mod1 <- function(coord, y , parms){
with(as.list(c(y, parms)),{
dr = - (Dn/3)*((1-C)/r)
dC = (Dn*Do*r*(1-C))-(2*An*C)
return(list(c(dr, dC)))
})
}
y <- c(r = 1, C = 0)
parms <- c(Dn = Dn, Do = Do,An = An)
coord <- seq(0,cf, 0.01)
out <- ode(y, coord, mod1, parms)
results = data.frame(coord = as.numeric(out[,"time"]),
r = as.numeric(out[,"r"]),
C = as.numeric(out[,"C"]))
results$F = as.numeric(1-((results[,"r"])^3)-(results[,"C"]/Do))
cols = c("F" = "green4","C" = "blue4","r" = "red4")
return(tail(results$F,n=1))
}
f(An = 5, Dn = 1.0)
An = seq(0.5,6,length=100)
Dn = seq(0.1,10,length=100)
z = outer(An,Dn,f)
f(An = 1, Dn = 0.8)
f = function(Dn,An)
{
Dn = Dn
An = An
Do = 2
mod1 <- function(coord, y , parms){
with(as.list(c(y, parms)),{
dr = - (Dn/3)*((1-C)/r)
dC = (Dn*Do*r*(1-C))-(2*An*C)
return(list(c(dr, dC)))
})
}
y <- c(r = 1, C = 0)
parms <- c(Dn = Dn, Do = Do,An = An)
coord <- seq(0,1, 0.01)
out <- ode(y, coord, mod1, parms)
results = data.frame(coord = as.numeric(out[,"time"]),
r = as.numeric(out[,"r"]),
C = as.numeric(out[,"C"]))
results$F = as.numeric(1-((results[,"r"])^3)-(results[,"C"]/Do))
return(tail(results$F,n=1))
}
f(An = 5, Dn = 1.0)
f(An = 1, Dn = 0.8)
z = outer(An,Dn,f)
f = function(Dn,An,r_init,c_init)
{
r_init  = r_init
c_init = c_init
Dn = Dn
An = An
Do = 2
mod1 <- function(coord, y , parms){
with(as.list(c(y, parms)),{
dr = - (Dn/3)*((1-C)/r)
dC = (Dn*Do*r*(1-C))-(2*An*C)
return(list(c(dr, dC)))
})
}
y <- c(r = r_init, C = c_init)
parms <- c(Dn = Dn, Do = Do,An = An)
coord <- seq(0,1, 0.01)
out <- ode(y, coord, mod1, parms)
results = data.frame(coord = as.numeric(out[,"time"]),
r = as.numeric(out[,"r"]),
C = as.numeric(out[,"C"]))
results$F = as.numeric(1-((results[,"r"])^3)-(results[,"C"]/Do))
return(tail(results$F,n=1))
}
f = function(Dn,An,r_init,c_init)
{
r_init  = r_init
c_init = c_init
Dn = Dn
An = An
Do = 2
mod1 <- function(coord, y , parms){
with(as.list(c(y, parms)),{
dr = - (Dn/3)*((1-C)/r)
dC = (Dn*Do*r*(1-C))-(2*An*C)
return(list(c(dr, dC)))
})
}
y <- c(r = r_init, C = c_init)
parms <- c(Dn = Dn, Do = Do,An = An)
coord <- seq(0,1, 0.01)
out <- ode(y, coord, mod1, parms)
results = data.frame(coord = as.numeric(out[,"time"]),
r = as.numeric(out[,"r"]),
C = as.numeric(out[,"C"]))
results$F = as.numeric(1-((results[,"r"])^3)-(results[,"C"]/Do))
return(tail(results$F,n=1))
}
r_init = c(rep(1,100))
r_init
c_init = c(rep(0,100))
An = seq(0.5,6,length=100)
Dn = seq(0.1,10,length=100)
z = outer(An,Dn,f(r_init=r_init, c_init=c_init))
z = outer(An,Dn,f(An = An, Dn = Dn, r_init=r_init, c_init=c_init))
z = outer(An,Dn,f)
z = outer(An,Dn,f)
f = function(Dn,An,r_init,c_init)
{
r_init  = c(rep(1,100))
c_init = c(rep(0,100))
Dn = Dn
An = An
Do = 2
mod1 <- function(coord, y , parms){
with(as.list(c(y, parms)),{
dr = - (Dn/3)*((1-C)/r)
dC = (Dn*Do*r*(1-C))-(2*An*C)
return(list(c(dr, dC)))
})
}
y <- c(r = r_init, C = c_init)
parms <- c(Dn = Dn, Do = Do,An = An)
coord <- seq(0,1, 0.01)
out <- ode(y, coord, mod1, parms)
results = data.frame(coord = as.numeric(out[,"time"]),
r = as.numeric(out[,"r"]),
C = as.numeric(out[,"C"]))
results$F = as.numeric(1-((results[,"r"])^3)-(results[,"C"]/Do))
return(tail(results$F,n=1))
}
f = function(Dn,An)
{
r_init  = c(rep(1,100))
c_init = c(rep(0,100))
Dn = Dn
An = An
Do = 2
mod1 <- function(coord, y , parms){
with(as.list(c(y, parms)),{
dr = - (Dn/3)*((1-C)/r)
dC = (Dn*Do*r*(1-C))-(2*An*C)
return(list(c(dr, dC)))
})
}
y <- c(r = r_init, C = c_init)
parms <- c(Dn = Dn, Do = Do,An = An)
coord <- seq(0,1, 0.01)
out <- ode(y, coord, mod1, parms)
results = data.frame(coord = as.numeric(out[,"time"]),
r = as.numeric(out[,"r"]),
C = as.numeric(out[,"C"]))
results$F = as.numeric(1-((results[,"r"])^3)-(results[,"C"]/Do))
return(tail(results$F,n=1))
}
z = outer(An,Dn,f)
y <- c(r = 1, C = 0)
}
}
Q
q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
c
f = function(Dn,An)
{
r_init  = c(rep(1,100))
c_init = c(rep(0,100))
Dn = Dn
An = An
Do = 2
mod1 <- function(coord, y , parms){
with(as.list(c(y, parms)),{
dr = - (Dn/3)*((1-C)/r)
dC = (Dn*Do*r*(1-C))-(2*An*C)
return(list(c(dr, dC)))
})
}
y <- c(r = 1, C = 0)
parms <- c(Dn = Dn, Do = Do,An = An)
coord <- seq(0,1, 0.01)
out <- ode(y, coord, mod1, parms)
results = data.frame(coord = as.numeric(out[,"time"]),
r = as.numeric(out[,"r"]),
C = as.numeric(out[,"C"]))
results$F = as.numeric(1-((results[,"r"])^3)-(results[,"C"]/Do))
return(tail(results$F,n=1))
}
f(An = 5, Dn = 1.0)
f(An = 1, Dn = 0.8)
An = seq(0.5,6,length=10)
Dn = seq(0.1,10,length=10)
z = outer(An,Dn,f)
z = outer(An,Dn,1)
z = outer(An,Dn,'*')
View(z)
f(An = 1, Dn = 0.8)
typeof((f(An = 1, Dn = 0.8)))
typeof(An)
z = outer(An,Dn,'f')
An = seq(1,1,length=10)
Dn = seq(5,5,length=10)
z = outer(An,Dn,'f')
An = 5
Dn = 1.0
f = function(Dn,An)
{
r_init  = c(rep(1,100))
c_init = c(rep(0,100))
Dn = Dn
An = An
Do = 2
mod1 <- function(coord, y , parms){
with(as.list(c(y, parms)),{
dr = - (Dn/3)*((1-C)/r)
dC = (Dn*Do*r*(1-C))-(2*An*C)
return(list(c(dr, dC)))
})
}
y <- c(r = r_init, C = c_init)
parms <- c(Dn = Dn, Do = Do,An = An)
coord <- seq(0,1, 0.01)
out <- ode(y, coord, mod1, parms)
results = data.frame(coord = as.numeric(out[,"time"]),
r = as.numeric(out[,"r"]),
C = as.numeric(out[,"C"]))
results$F = as.numeric(1-((results[,"r"])^3)-(results[,"C"]/Do))
return(tail(results$F,n=1))
}
f(An = 5, Dn = 1.0)
z = outer(An,Dn,'f')
f = function(x,y) exp(-(x^2+y^2))
x = seq(-3,3,length=101)
y = seq(-3,3,length=101)
f(1,1)
typeof(f(1,1))
f = function(Dn,An)
{
r_init  = c(rep(1,100))
c_init = c(rep(0,100))
Dn = Dn
An = An
Do = 2
mod1 <- function(coord, y , parms){
with(as.list(c(y, parms)),{
dr = - (Dn/3)*((1-C)/r)
dC = (Dn*Do*r*(1-C))-(2*An*C)
return(list(c(dr, dC)))
})
}
y <- c(r = r_init, C = c_init)
parms <- c(Dn = Dn, Do = Do,An = An)
coord <- seq(0,1, 0.01)
out <- ode(y, coord, mod1, parms)
results = data.frame(coord = as.numeric(out[,"time"]),
r = as.numeric(out[,"r"]),
C = as.numeric(out[,"C"]))
results$F = as.numeric(1-((results[,"r"])^3)-(results[,"C"]/Do))
return(tail(results$F,n=1))
}
f(An = 5, Dn = 1.0)
f = function(Dn,An)
{
r_init  = c(rep(1,100))
c_init = c(rep(0,100))
Dn = Dn
An = An
Do = 2
mod1 <- function(coord, y , parms){
with(as.list(c(y, parms)),{
dr = - (Dn/3)*((1-C)/r)
dC = (Dn*Do*r*(1-C))-(2*An*C)
return(list(c(dr, dC)))
})
}
y <- c(r = 1, C = 0)
parms <- c(Dn = Dn, Do = Do,An = An)
coord <- seq(0,1, 0.01)
out <- ode(y, coord, mod1, parms)
results = data.frame(coord = as.numeric(out[,"time"]),
r = as.numeric(out[,"r"]),
C = as.numeric(out[,"C"]))
results$F = as.numeric(1-((results[,"r"])^3)-(results[,"C"]/Do))
return(tail(results$F,n=1))
}
f(An = 5, Dn = 1.0)
z = outer(An,Dn,'f')
persp3d(An,Dn,z)
z
An = seq(1,1,length=10)
Dn = seq(5,5,length=10)
z = outer(An,Dn,'f')
library(rgl)
library(deSolve)
library(ggplot2)
An = 5
Dn = 1.0
f = function(Dn,An)
{
r_init  = c(rep(1,100))
c_init = c(rep(0,100))
Dn = Dn
An = An
Do = 2
mod1 <- function(coord, y , parms){
with(as.list(c(y, parms)),{
dr = - (Dn/3)*((1-C)/r)
dC = (Dn*Do*r*(1-C))-(2*An*C)
return(list(c(dr, dC)))
})
}
y <- c(r = 1, C = 0)
parms <- c(Dn = Dn, Do = Do,An = An)
coord <- seq(0,1, 0.01)
out <- ode(y, coord, mod1, parms)
results = data.frame(coord = as.numeric(out[,"time"]),
r = as.numeric(out[,"r"]),
C = as.numeric(out[,"C"]))
results$F = as.numeric(1-((results[,"r"])^3)-(results[,"C"]/Do))
return(tail(results$F,n=1))
}
f(An = 5, Dn = 1.0)
View(f)
ls()
Dn = Dn
An = An
Do = 2
mod1 <- function(coord, y , parms){
with(as.list(c(y, parms)),{
dr = - (Dn/3)*((1-C)/r)
dC = (Dn*Do*r*(1-C))-(2*An*C)
return(list(c(dr, dC)))
})
}
y <- c(r = 1, C = 0)
f = function(Dn,An)
{
r_init  = c(rep(1,100))
c_init = c(rep(0,100))
Dn = Dn
An = An
Do = 2
mod1 <- function(coord, y , parms){
with(as.list(c(y, parms)),{
dr = - (Dn/3)*((1-C)/r)
dC = (Dn*Do*r*(1-C))-(2*An*C)
return(list(c(dr, dC)))
})
}
y <- c(r = 1, C = 0)
parms <- c(Dn = Dn, Do = Do,An = An)
coord <- seq(0,1, 0.01)
out <- ode(y, coord, mod1, parms)
results = data.frame(coord = as.numeric(out[,"time"]),
r = as.numeric(out[,"r"]),
C = as.numeric(out[,"C"]))
results$F = as.numeric(1-((results[,"r"])^3)-(results[,"C"]/Do))
return(tail(results$F,n=1))
rm(y,parms, coord, out,)
}
f(An = 5, Dn = 1.0)
An = seq(0.5,6,length=10)
Dn = seq(0.1,10,length=10)
An = seq(1,1,length=10)
Dn = seq(5,5,length=10)
z = outer(An,Dn,'f')
f = function(Dn,An)
{
r_init  = c(rep(1,100))
c_init = c(rep(0,100))
Dn = Dn
An = An
Do = 2
mod1 <- function(coord, y , parms){
with(as.list(c(y, parms)),{
dr = - (Dn/3)*((1-C)/r)
dC = (Dn*Do*r*(1-C))-(2*An*C)
return(list(c(dr, dC)))
})
}
y <- c(r = 1, C = 0)
parms <- c(Dn = Dn, Do = Do,An = An)
coord <- seq(0,1, 0.01)
out <- ode(y, coord, mod1, parms)
results = data.frame(coord = as.numeric(out[,"time"]),
r = as.numeric(out[,"r"]),
C = as.numeric(out[,"C"]))
results$F = as.numeric(1-((results[,"r"])^3)-(results[,"C"]/Do))
return(list(tail(results$F,n=1),rm(y,parms, coord, out,)))
}
f(An = 5, Dn = 1.0)
f = function(Dn,An)
{
r_init  = c(rep(1,100))
c_init = c(rep(0,100))
Dn = Dn
An = An
Do = 2
mod1 <- function(coord, y , parms){
with(as.list(c(y, parms)),{
dr = - (Dn/3)*((1-C)/r)
dC = (Dn*Do*r*(1-C))-(2*An*C)
return(list(c(dr, dC)))
})
}
y <- c(r = 1, C = 0)
parms <- c(Dn = Dn, Do = Do,An = An)
coord <- seq(0,1, 0.01)
out <- ode(y, coord, mod1, parms)
results = data.frame(coord = as.numeric(out[,"time"]),
r = as.numeric(out[,"r"]),
C = as.numeric(out[,"C"]))
results$F = as.numeric(1-((results[,"r"])^3)-(results[,"C"]/Do))
return(list(tail(results$F,n=1)))
rm(y,parms, coord, out,)
}
f(An = 5, Dn = 1.0)
An = seq(0.5,6,length=10)
Dn = seq(0.1,10,length=10)
An = seq(1,1,length=10)
Dn = seq(5,5,length=10)
z = outer(An,Dn,'f')
An = seq(0.5,6,length=100)
Dn = seq(0.1,10,length=100)
outer1 = expand.grid(An, Dn)
f(An = 1, Dn = 0.8)
f = function(Dn,An)
{
r_init  = c(rep(1,100))
c_init = c(rep(0,100))
Dn = Dn
An = An
Do = 2
mod1 <- function(coord, y , parms){
with(as.list(c(y, parms)),{
dr = - (Dn/3)*((1-C)/r)
dC = (Dn*Do*r*(1-C))-(2*An*C)
return(list(c(dr, dC)))
})
}
y <- c(r = 1, C = 0)
parms <- c(Dn = Dn, Do = Do,An = An)
coord <- seq(0,1, 0.01)
out <- ode(y, coord, mod1, parms)
results = data.frame(coord = as.numeric(out[,"time"]),
r = as.numeric(out[,"r"]),
C = as.numeric(out[,"C"]))
results$F = as.numeric(1-((results[,"r"])^3)-(results[,"C"]/Do))
return(tail(results$F,n=1))
rm(y,parms, coord, out,)
}
f(An = 5, Dn = 1.0)
An = seq(0.5,6,length=100)
Dn = seq(0.1,10,length=100)
outer1 = expand.grid(An, Dn)
length(An)
length(outer1)
outer1
dim(outer1)
dim(outer1)[1]
n = dim(outer1)[1]
outer1[,3]
outer1
n = dim(outer1)[1]
for (i in 1:n) {
outer1[,3] <- f(An = outer1[,1], Dn = outer1[,2])
}
for (i in 1:n) {
outer1[i,3] <- f(An = outer1[i,1], Dn = outer1[i,2])
}
warnings()
View(outer1)
outer2 <- na.omit(outer1, 3) # Eliminación de valores no convergentes
plot3d(outer2[,1],outer2[,2],outer1[,3],
front="line",
back="line",
add=TRUE,
xlab="An",
ylab="Dn",
zlab="Biodisponibilidad (F)",
col="red",
ticktype="detailed",
aspect="iso") # Gráfico Final de Resultados
source('F:/Documentos/Estudio - Documentos/Farmacocinética 2012-1/Bioequivalencia (2018)/·Clases/plug_flow/solucion_3d.R')
